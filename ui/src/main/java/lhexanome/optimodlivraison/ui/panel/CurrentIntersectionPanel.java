package lhexanome.optimodlivraison.ui.panel;

import lhexanome.optimodlivraison.platform.models.Intersection;
import lhexanome.optimodlivraison.platform.models.RoadMap;
import lhexanome.optimodlivraison.platform.models.Vector;
import lhexanome.optimodlivraison.ui.controller.CurrentIntersectionController;

import javax.swing.*;
import java.awt.*;
import java.util.HashSet;
import java.util.Set;

/**
 * Delivery order panel.
 */
public class CurrentIntersectionPanel extends AbstractPanel {

    /**
     * Presentation text for displayed informations.
     */
    private static final String PRESENTATION_TEXT = "Rues à proximité de l'intersection sélectionnée : ";
    /**
     * Content panel.
     */
    private JPanel contentPane;
    /**
     * displayed intersection infos on the screen.
     */
    private JLabel displayedInformations;
    /**
     * Content panel.
     */
    private Intersection displayedIntersection;

    /**
     * Constructor.
     *
     * @param controller Delivery order controller
     */
    public CurrentIntersectionPanel(CurrentIntersectionController controller) {
        super(controller);
        $$$setupUI$$$();
        setup();
    }

    /**
     * {@link AbstractPanel#setup()}.
     */
    @Override
    public void setup() {
    }

    /**
     * Intersection information display.
     * Called by the controller.
     *
     * @param intersectionToDisplay intersectionToDisplay
     * @param roadMap               roadMap
     */
    public void setData(Intersection intersectionToDisplay, RoadMap roadMap) {
        displayedIntersection = intersectionToDisplay;
        String lineReturn = "<br>";
        String bulletedListHeader = "-";
        StringBuilder s = new StringBuilder();
        if (displayedIntersection != null) {
            s.append("<html>");
            s.append(lineReturn).append(PRESENTATION_TEXT).append(lineReturn);
            Set<String> streetNames = new HashSet<>();

            for (Vector vector : roadMap.getVectorsFromIntersection(intersectionToDisplay)) {
                streetNames.add(vector.getStreetName());
            }
            for (String streetName : streetNames) {
                s
                        .append(bulletedListHeader)
                        .append(" ")
                        .append(streetName.isEmpty() ? "Rue sans nom" : streetName)
                        .append(lineReturn);
            }
            s.append("</html>");
        }
        displayedInformations.setText(s.toString());
    }

    /**
     * {@link AbstractPanel#getContentPane()}.
     */
    @Override
    public JPanel getContentPane() {
        return contentPane;

        // Disable Checkstyle for generated code
        //CHECKSTYLE:OFF
    }

    private void createUIComponents() {
        displayedInformations = new JLabel();
        displayedInformations.setText("");
        displayedInformations.setVisible(true);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        displayedInformations.setText("");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 40, 0, 0);
        contentPane.add(displayedInformations, gbc);
        final JLabel label1 = new JLabel();
        label1.setIcon(new ImageIcon(getClass().getResource("/plan/marker/planMarkerOrange_little.png")));
        label1.setText("Livraison");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 0, 4, 8);
        contentPane.add(label1, gbc);
        final JLabel label2 = new JLabel();
        label2.setIcon(new ImageIcon(getClass().getResource("/plan/marker/planMarkerRed_little.png")));
        label2.setText("Entrepôt");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 0, 4, 8);
        contentPane.add(label2, gbc);
        final JLabel label3 = new JLabel();
        label3.setIcon(new ImageIcon(getClass().getResource("/plan/marker/planMarkerBlue_little.png")));
        label3.setText("Livraison sélectionnée");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 0, 4, 0);
        contentPane.add(label3, gbc);
        final JLabel label4 = new JLabel();
        label4.setIcon(new ImageIcon(getClass().getResource("/plan/marker/planMarkerGreen_little.png")));
        label4.setText("Intersection sélectionnée");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 0, 4, 0);
        contentPane.add(label4, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
